// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type StorageAccesskeyInitParameters struct {

	// Comment for the access_key.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// If a user_uuid is set, a user-specific key will get created.
	// If no user_uuid is set along a user with write-access to the contract will still only create
	// a user-specific key for themselves while a user with admin-access to the contract will create
	// a contract-level admin key.
	UserUUID *string `json:"userUuid,omitempty" tf:"user_uuid,omitempty"`
}

type StorageAccesskeyObservation struct {

	// Comment for the access_key.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// If a user_uuid is set, a user-specific key will get created.
	// If no user_uuid is set along a user with write-access to the contract will still only create
	// a user-specific key for themselves while a user with admin-access to the contract will create
	// a contract-level admin key.
	UserUUID *string `json:"userUuid,omitempty" tf:"user_uuid,omitempty"`
}

type StorageAccesskeyParameters struct {

	// Comment for the access_key.
	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// If a user_uuid is set, a user-specific key will get created.
	// If no user_uuid is set along a user with write-access to the contract will still only create
	// a user-specific key for themselves while a user with admin-access to the contract will create
	// a contract-level admin key.
	// +kubebuilder:validation:Optional
	UserUUID *string `json:"userUuid,omitempty" tf:"user_uuid,omitempty"`
}

// StorageAccesskeySpec defines the desired state of StorageAccesskey
type StorageAccesskeySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StorageAccesskeyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider StorageAccesskeyInitParameters `json:"initProvider,omitempty"`
}

// StorageAccesskeyStatus defines the observed state of StorageAccesskey.
type StorageAccesskeyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StorageAccesskeyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// StorageAccesskey is the Schema for the StorageAccesskeys API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gridscale}
type StorageAccesskey struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StorageAccesskeySpec   `json:"spec"`
	Status            StorageAccesskeyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StorageAccesskeyList contains a list of StorageAccesskeys
type StorageAccesskeyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StorageAccesskey `json:"items"`
}

// Repository type metadata.
var (
	StorageAccesskey_Kind             = "StorageAccesskey"
	StorageAccesskey_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: StorageAccesskey_Kind}.String()
	StorageAccesskey_KindAPIVersion   = StorageAccesskey_Kind + "." + CRDGroupVersion.String()
	StorageAccesskey_GroupVersionKind = CRDGroupVersion.WithKind(StorageAccesskey_Kind)
)

func init() {
	SchemeBuilder.Register(&StorageAccesskey{}, &StorageAccesskeyList{})
}
