// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SshkeyInitParameters struct {

	// List of labels in the format [ "label1", "label2" ].
	// List of labels.
	// +listType=set
	Labels []*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The human-readable name of the object. It supports the full UTF-8 character set, with a maximum of 64 characters.
	// The human-readable name of the object. It supports the full UTF-8 character set, with a maximum of 64 characters.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// This is the OpenSSH public key string (all key types are supported => ed25519, ecdsa, dsa, rsa, rsa1).
	// sshkey_string is the OpenSSH public key string (all key types are supported => ed25519, ecdsa, dsa, rsa, rsa1)
	Sshkey *string `json:"sshkey,omitempty" tf:"sshkey,omitempty"`
}

type SshkeyObservation struct {

	// Defines the date and time of the last object change.
	// The date and time of the last object change
	ChangeTime *string `json:"changeTime,omitempty" tf:"change_time,omitempty"`

	// The time the object was created.
	// The date and time the object was initially created
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// List of labels in the format [ "label1", "label2" ].
	// List of labels.
	// +listType=set
	Labels []*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The human-readable name of the object. It supports the full UTF-8 character set, with a maximum of 64 characters.
	// The human-readable name of the object. It supports the full UTF-8 character set, with a maximum of 64 characters.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// This is the OpenSSH public key string (all key types are supported => ed25519, ecdsa, dsa, rsa, rsa1).
	// sshkey_string is the OpenSSH public key string (all key types are supported => ed25519, ecdsa, dsa, rsa, rsa1)
	Sshkey *string `json:"sshkey,omitempty" tf:"sshkey,omitempty"`

	// status indicates the status of the object.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type SshkeyParameters struct {

	// List of labels in the format [ "label1", "label2" ].
	// List of labels.
	// +kubebuilder:validation:Optional
	// +listType=set
	Labels []*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The human-readable name of the object. It supports the full UTF-8 character set, with a maximum of 64 characters.
	// The human-readable name of the object. It supports the full UTF-8 character set, with a maximum of 64 characters.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// This is the OpenSSH public key string (all key types are supported => ed25519, ecdsa, dsa, rsa, rsa1).
	// sshkey_string is the OpenSSH public key string (all key types are supported => ed25519, ecdsa, dsa, rsa, rsa1)
	// +kubebuilder:validation:Optional
	Sshkey *string `json:"sshkey,omitempty" tf:"sshkey,omitempty"`
}

// SshkeySpec defines the desired state of Sshkey
type SshkeySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SshkeyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SshkeyInitParameters `json:"initProvider,omitempty"`
}

// SshkeyStatus defines the observed state of Sshkey.
type SshkeyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SshkeyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Sshkey is the Schema for the Sshkeys API. Manages an SSH public key in gridscale.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gridscale}
type Sshkey struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.sshkey) || (has(self.initProvider) && has(self.initProvider.sshkey))",message="spec.forProvider.sshkey is a required parameter"
	Spec   SshkeySpec   `json:"spec"`
	Status SshkeyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SshkeyList contains a list of Sshkeys
type SshkeyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Sshkey `json:"items"`
}

// Repository type metadata.
var (
	Sshkey_Kind             = "Sshkey"
	Sshkey_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Sshkey_Kind}.String()
	Sshkey_KindAPIVersion   = Sshkey_Kind + "." + CRDGroupVersion.String()
	Sshkey_GroupVersionKind = CRDGroupVersion.WithKind(Sshkey_Kind)
)

func init() {
	SchemeBuilder.Register(&Sshkey{}, &SshkeyList{})
}
