// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AutoAssignedServersInitParameters struct {
}

type AutoAssignedServersObservation struct {

	// IP which is assigned to the server.
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// UUID of the server.
	ServerUUID *string `json:"serverUuid,omitempty" tf:"server_uuid,omitempty"`
}

type AutoAssignedServersParameters struct {
}

type NetworkInitParameters_2 struct {

	// Enable DHCP.
	// Enable DHCP.
	DHCPActive *bool `json:"dhcpActive,omitempty" tf:"dhcp_active,omitempty"`

	// The IP address reserved and communicated by the dhcp service to be the default gateway.
	// DHCP DNS.
	DHCPDNS *string `json:"dhcpDns,omitempty" tf:"dhcp_dns,omitempty"`

	// The general IP Range configured for this network (/24 for private networks). If it is not set, gridscale internal default range is used.
	// The IP address reserved and communicated by the dhcp service to be the default gateway.
	DHCPGateway *string `json:"dhcpGateway,omitempty" tf:"dhcp_gateway,omitempty"`

	// DHCP DNS. If it is not set and DHCP is enabled, dhcp_range will be set by the backend automatically.
	// The general IP Range configured for this network (/24 for private networks). If it is not set, gridscale internal default range is used.
	// If it is not set and DHCP is enabled, dhcp_range will be set by the backend automatically.
	DHCPRange *string `json:"dhcpRange,omitempty" tf:"dhcp_range,omitempty"`

	// Subrange within the IP range.
	// Subrange within the IP range.
	// +listType=set
	DHCPReservedSubnet []*string `json:"dhcpReservedSubnet,omitempty" tf:"dhcp_reserved_subnet,omitempty"`

	// Defines information about MAC spoofing protection (filters layer2 and ARP traffic based on MAC source). It can only be (de-)activated on a private network - the public network always has l2security enabled. It will be true if the network is public, and false if the network is private.
	// MAC spoofing protection - filters layer2 and ARP traffic based on source MAC
	L2Security *bool `json:"l2security,omitempty" tf:"l2security,omitempty"`

	// List of labels in the format [ "label1", "label2" ].
	// List of labels.
	// +listType=set
	Labels []*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The human-readable name of the object. It supports the full UTF-8 character set, with a maximum of 64 characters.
	// The human-readable name of the object. It supports the full UTF-8 character set, with a maximum of 64 characters.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type NetworkObservation_2 struct {

	// A list of server UUIDs with the corresponding IPs that are designated by the DHCP server.
	// A list of server UUIDs with the corresponding IPs that are designated by the DHCP server.
	AutoAssignedServers []AutoAssignedServersObservation `json:"autoAssignedServers,omitempty" tf:"auto_assigned_servers,omitempty"`

	// Defines the date and time of the last object change.
	// The date and time of the last object change
	ChangeTime *string `json:"changeTime,omitempty" tf:"change_time,omitempty"`

	// The time the object was created.
	// The date and time the object was initially created
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// Enable DHCP.
	// Enable DHCP.
	DHCPActive *bool `json:"dhcpActive,omitempty" tf:"dhcp_active,omitempty"`

	// The IP address reserved and communicated by the dhcp service to be the default gateway.
	// DHCP DNS.
	DHCPDNS *string `json:"dhcpDns,omitempty" tf:"dhcp_dns,omitempty"`

	// The general IP Range configured for this network (/24 for private networks). If it is not set, gridscale internal default range is used.
	// The IP address reserved and communicated by the dhcp service to be the default gateway.
	DHCPGateway *string `json:"dhcpGateway,omitempty" tf:"dhcp_gateway,omitempty"`

	// DHCP DNS. If it is not set and DHCP is enabled, dhcp_range will be set by the backend automatically.
	// The general IP Range configured for this network (/24 for private networks). If it is not set, gridscale internal default range is used.
	// If it is not set and DHCP is enabled, dhcp_range will be set by the backend automatically.
	DHCPRange *string `json:"dhcpRange,omitempty" tf:"dhcp_range,omitempty"`

	// Subrange within the IP range.
	// Subrange within the IP range.
	// +listType=set
	DHCPReservedSubnet []*string `json:"dhcpReservedSubnet,omitempty" tf:"dhcp_reserved_subnet,omitempty"`

	// If deleting this network is allowed.
	// If deleting this network is allowed
	DeleteBlock *bool `json:"deleteBlock,omitempty" tf:"delete_block,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Defines information about MAC spoofing protection (filters layer2 and ARP traffic based on MAC source). It can only be (de-)activated on a private network - the public network always has l2security enabled. It will be true if the network is public, and false if the network is private.
	// MAC spoofing protection - filters layer2 and ARP traffic based on source MAC
	L2Security *bool `json:"l2security,omitempty" tf:"l2security,omitempty"`

	// List of labels in the format [ "label1", "label2" ].
	// List of labels.
	// +listType=set
	Labels []*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Two digit country code (ISO 3166-2) of the location where this object is placed.
	// Two digit country code (ISO 3166-2) of the location where this object is placed.
	LocationCountry *string `json:"locationCountry,omitempty" tf:"location_country,omitempty"`

	// Uses IATA airport code, which works as a location identifier.
	// Uses IATA airport code, which works as a location identifier
	LocationIata *string `json:"locationIata,omitempty" tf:"location_iata,omitempty"`

	// The location name.
	// The human-readable name of the location. It supports the full UTF-8 character set, with a maximum of 64 characters
	LocationName *string `json:"locationName,omitempty" tf:"location_name,omitempty"`

	// The location this network is placed. The location of a resource is determined by it's project.
	// The location this object is placed.
	LocationUUID *string `json:"locationUuid,omitempty" tf:"location_uuid,omitempty"`

	// The human-readable name of the object. It supports the full UTF-8 character set, with a maximum of 64 characters.
	// The human-readable name of the object. It supports the full UTF-8 character set, with a maximum of 64 characters.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The type of this network, can be mpls, breakout or network.
	// The type of this network, can be mpls, breakout or network.
	NetworkType *string `json:"networkType,omitempty" tf:"network_type,omitempty"`

	// A list of server UUIDs with the corresponding IPs that are designated by the user.
	// A list of server UUIDs with the corresponding IPs that are designated by the user.
	PinnedServers []PinnedServersObservation `json:"pinnedServers,omitempty" tf:"pinned_servers,omitempty"`

	// status indicates the status of the object.
	// status indicates the status of the object.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type NetworkParameters_2 struct {

	// Enable DHCP.
	// Enable DHCP.
	// +kubebuilder:validation:Optional
	DHCPActive *bool `json:"dhcpActive,omitempty" tf:"dhcp_active,omitempty"`

	// The IP address reserved and communicated by the dhcp service to be the default gateway.
	// DHCP DNS.
	// +kubebuilder:validation:Optional
	DHCPDNS *string `json:"dhcpDns,omitempty" tf:"dhcp_dns,omitempty"`

	// The general IP Range configured for this network (/24 for private networks). If it is not set, gridscale internal default range is used.
	// The IP address reserved and communicated by the dhcp service to be the default gateway.
	// +kubebuilder:validation:Optional
	DHCPGateway *string `json:"dhcpGateway,omitempty" tf:"dhcp_gateway,omitempty"`

	// DHCP DNS. If it is not set and DHCP is enabled, dhcp_range will be set by the backend automatically.
	// The general IP Range configured for this network (/24 for private networks). If it is not set, gridscale internal default range is used.
	// If it is not set and DHCP is enabled, dhcp_range will be set by the backend automatically.
	// +kubebuilder:validation:Optional
	DHCPRange *string `json:"dhcpRange,omitempty" tf:"dhcp_range,omitempty"`

	// Subrange within the IP range.
	// Subrange within the IP range.
	// +kubebuilder:validation:Optional
	// +listType=set
	DHCPReservedSubnet []*string `json:"dhcpReservedSubnet,omitempty" tf:"dhcp_reserved_subnet,omitempty"`

	// Defines information about MAC spoofing protection (filters layer2 and ARP traffic based on MAC source). It can only be (de-)activated on a private network - the public network always has l2security enabled. It will be true if the network is public, and false if the network is private.
	// MAC spoofing protection - filters layer2 and ARP traffic based on source MAC
	// +kubebuilder:validation:Optional
	L2Security *bool `json:"l2security,omitempty" tf:"l2security,omitempty"`

	// List of labels in the format [ "label1", "label2" ].
	// List of labels.
	// +kubebuilder:validation:Optional
	// +listType=set
	Labels []*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The human-readable name of the object. It supports the full UTF-8 character set, with a maximum of 64 characters.
	// The human-readable name of the object. It supports the full UTF-8 character set, with a maximum of 64 characters.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type PinnedServersInitParameters struct {
}

type PinnedServersObservation struct {

	// IP which is assigned to the server.
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// UUID of the server.
	ServerUUID *string `json:"serverUuid,omitempty" tf:"server_uuid,omitempty"`
}

type PinnedServersParameters struct {
}

// NetworkSpec defines the desired state of Network
type NetworkSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NetworkParameters_2 `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NetworkInitParameters_2 `json:"initProvider,omitempty"`
}

// NetworkStatus defines the observed state of Network.
type NetworkStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NetworkObservation_2 `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Network is the Schema for the Networks API. Manages a network in gridscale.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gridscale}
type Network struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   NetworkSpec   `json:"spec"`
	Status NetworkStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkList contains a list of Networks
type NetworkList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Network `json:"items"`
}

// Repository type metadata.
var (
	Network_Kind             = "Network"
	Network_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Network_Kind}.String()
	Network_KindAPIVersion   = Network_Kind + "." + CRDGroupVersion.String()
	Network_GroupVersionKind = CRDGroupVersion.WithKind(Network_Kind)
)

func init() {
	SchemeBuilder.Register(&Network{}, &NetworkList{})
}
