// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BackendServerInitParameters struct {

	// A valid domain or an IP address of a server.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// The proxy protocol version. The proxy protocol is disabled by default and the valid version is either v1 or v2.
	ProxyProtocol *string `json:"proxyProtocol,omitempty" tf:"proxy_protocol,omitempty"`

	// The backend host weight. Default: 100.
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type BackendServerObservation struct {

	// A valid domain or an IP address of a server.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// The proxy protocol version. The proxy protocol is disabled by default and the valid version is either v1 or v2.
	ProxyProtocol *string `json:"proxyProtocol,omitempty" tf:"proxy_protocol,omitempty"`

	// The backend host weight. Default: 100.
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type BackendServerParameters struct {

	// A valid domain or an IP address of a server.
	// +kubebuilder:validation:Optional
	Host *string `json:"host" tf:"host,omitempty"`

	// The proxy protocol version. The proxy protocol is disabled by default and the valid version is either v1 or v2.
	// +kubebuilder:validation:Optional
	ProxyProtocol *string `json:"proxyProtocol,omitempty" tf:"proxy_protocol,omitempty"`

	// The backend host weight. Default: 100.
	// +kubebuilder:validation:Optional
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type ForwardingRuleInitParameters struct {

	// The UUID of a custom certificate.
	// The UUID of a custom certificate.
	CertificateUUID *string `json:"certificateUuid,omitempty" tf:"certificate_uuid,omitempty"`

	// A valid domain name that points to the loadbalancer's IP address.
	// A valid domain name that points to the loadbalancer's IP address.
	LetsencryptSSL *string `json:"letsencryptSsl,omitempty" tf:"letsencrypt_ssl,omitempty"`

	// Specifies the entry port of the load balancer.
	// Specifies the entry port of the load balancer.
	ListenPort *float64 `json:"listenPort,omitempty" tf:"listen_port,omitempty"`

	// Supports HTTP and TCP mode. Valid values: http, tcp.
	// Supports HTTP and TCP mode. Valid values: http, tcp.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// Specifies the exit port that the load balancer uses to forward the traffic to the backend server.
	// Specifies the exit port that the load balancer uses to forward the traffic to the backend server.
	TargetPort *float64 `json:"targetPort,omitempty" tf:"target_port,omitempty"`
}

type ForwardingRuleObservation struct {

	// The UUID of a custom certificate.
	// The UUID of a custom certificate.
	CertificateUUID *string `json:"certificateUuid,omitempty" tf:"certificate_uuid,omitempty"`

	// A valid domain name that points to the loadbalancer's IP address.
	// A valid domain name that points to the loadbalancer's IP address.
	LetsencryptSSL *string `json:"letsencryptSsl,omitempty" tf:"letsencrypt_ssl,omitempty"`

	// Specifies the entry port of the load balancer.
	// Specifies the entry port of the load balancer.
	ListenPort *float64 `json:"listenPort,omitempty" tf:"listen_port,omitempty"`

	// Supports HTTP and TCP mode. Valid values: http, tcp.
	// Supports HTTP and TCP mode. Valid values: http, tcp.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// Specifies the exit port that the load balancer uses to forward the traffic to the backend server.
	// Specifies the exit port that the load balancer uses to forward the traffic to the backend server.
	TargetPort *float64 `json:"targetPort,omitempty" tf:"target_port,omitempty"`
}

type ForwardingRuleParameters struct {

	// The UUID of a custom certificate.
	// The UUID of a custom certificate.
	// +kubebuilder:validation:Optional
	CertificateUUID *string `json:"certificateUuid,omitempty" tf:"certificate_uuid,omitempty"`

	// A valid domain name that points to the loadbalancer's IP address.
	// A valid domain name that points to the loadbalancer's IP address.
	// +kubebuilder:validation:Optional
	LetsencryptSSL *string `json:"letsencryptSsl,omitempty" tf:"letsencrypt_ssl,omitempty"`

	// Specifies the entry port of the load balancer.
	// Specifies the entry port of the load balancer.
	// +kubebuilder:validation:Optional
	ListenPort *float64 `json:"listenPort" tf:"listen_port,omitempty"`

	// Supports HTTP and TCP mode. Valid values: http, tcp.
	// Supports HTTP and TCP mode. Valid values: http, tcp.
	// +kubebuilder:validation:Optional
	Mode *string `json:"mode" tf:"mode,omitempty"`

	// Specifies the exit port that the load balancer uses to forward the traffic to the backend server.
	// Specifies the exit port that the load balancer uses to forward the traffic to the backend server.
	// +kubebuilder:validation:Optional
	TargetPort *float64 `json:"targetPort" tf:"target_port,omitempty"`
}

type LoadbalancerInitParameters struct {

	// The algorithm used to process requests. Accepted values: roundrobin/leastconn.
	// The algorithm used to process requests. Accepted values: roundrobin/leastconn.
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	// The servers that the load balancer can communicate with.
	// List of backend servers.
	BackendServer []BackendServerInitParameters `json:"backendServer,omitempty" tf:"backend_server,omitempty"`

	// The forwarding rules of the load balancer.
	// List of forwarding rules for the Load balancer.
	ForwardingRule []ForwardingRuleInitParameters `json:"forwardingRule,omitempty" tf:"forwarding_rule,omitempty"`

	// List of labels in the format [ "label1", "label2" ].
	// List of labels.
	// +listType=set
	Labels []*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The UUID of the IPv4 address the load balancer will listen to for incoming requests.
	// The UUID of the IPv4 address the Load balancer will listen to for incoming requests.
	// +crossplane:generate:reference:type=github.com/dNationCloud/provider-gridscale/apis/gridscale/v1alpha1.IPv4
	ListenIPv4UUID *string `json:"listenIpv4Uuid,omitempty" tf:"listen_ipv4_uuid,omitempty"`

	// Reference to a IPv4 in gridscale to populate listenIpv4Uuid.
	// +kubebuilder:validation:Optional
	ListenIPv4UUIDRef *v1.Reference `json:"listenIpv4UuidRef,omitempty" tf:"-"`

	// Selector for a IPv4 in gridscale to populate listenIpv4Uuid.
	// +kubebuilder:validation:Optional
	ListenIPv4UUIDSelector *v1.Selector `json:"listenIpv4UuidSelector,omitempty" tf:"-"`

	// The UUID of the IPv6 address the load balancer will listen to for incoming requests.
	// The UUID of the IPv6 address the Load balancer will listen to for incoming requests.
	// +crossplane:generate:reference:type=github.com/dNationCloud/provider-gridscale/apis/gridscale/v1alpha1.IPv6
	ListenIPv6UUID *string `json:"listenIpv6Uuid,omitempty" tf:"listen_ipv6_uuid,omitempty"`

	// Reference to a IPv6 in gridscale to populate listenIpv6Uuid.
	// +kubebuilder:validation:Optional
	ListenIPv6UUIDRef *v1.Reference `json:"listenIpv6UuidRef,omitempty" tf:"-"`

	// Selector for a IPv6 in gridscale to populate listenIpv6Uuid.
	// +kubebuilder:validation:Optional
	ListenIPv6UUIDSelector *v1.Selector `json:"listenIpv6UuidSelector,omitempty" tf:"-"`

	// The human-readable name of the object. It supports the full UTF-8 character set, with a maximum of 64 characters.
	// The human-readable name of the object. It supports the full UTF-8 character set, with a maximum of 64 characters
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Whether the load balancer is forced to redirect requests from HTTP to HTTPS.
	// Whether the Load balancer is forced to redirect requests from HTTP to HTTPS
	RedirectHTTPToHTTPS *bool `json:"redirectHttpToHttps,omitempty" tf:"redirect_http_to_https,omitempty"`

	// The status of the load balancer.
	// Status indicates the status of the object.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Timeouts configuration (create, update, delete).
	// +mapType=granular
	Timeouts map[string]*string `json:"timeouts,omitempty" tf:"timeouts,omitempty"`
}

type LoadbalancerObservation struct {

	// The algorithm used to process requests. Accepted values: roundrobin/leastconn.
	// The algorithm used to process requests. Accepted values: roundrobin/leastconn.
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	// The servers that the load balancer can communicate with.
	// List of backend servers.
	BackendServer []BackendServerObservation `json:"backendServer,omitempty" tf:"backend_server,omitempty"`

	// The forwarding rules of the load balancer.
	// List of forwarding rules for the Load balancer.
	ForwardingRule []ForwardingRuleObservation `json:"forwardingRule,omitempty" tf:"forwarding_rule,omitempty"`

	// The UUID of the load balancer.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// List of labels in the format [ "label1", "label2" ].
	// List of labels.
	// +listType=set
	Labels []*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The UUID of the IPv4 address the load balancer will listen to for incoming requests.
	// The UUID of the IPv4 address the Load balancer will listen to for incoming requests.
	ListenIPv4UUID *string `json:"listenIpv4Uuid,omitempty" tf:"listen_ipv4_uuid,omitempty"`

	// The UUID of the IPv6 address the load balancer will listen to for incoming requests.
	// The UUID of the IPv6 address the Load balancer will listen to for incoming requests.
	ListenIPv6UUID *string `json:"listenIpv6Uuid,omitempty" tf:"listen_ipv6_uuid,omitempty"`

	// The location this load balancer is placed. The location of a resource is determined by it's project.
	// The location this object is placed.
	LocationUUID *string `json:"locationUuid,omitempty" tf:"location_uuid,omitempty"`

	// The human-readable name of the object. It supports the full UTF-8 character set, with a maximum of 64 characters.
	// The human-readable name of the object. It supports the full UTF-8 character set, with a maximum of 64 characters
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Whether the load balancer is forced to redirect requests from HTTP to HTTPS.
	// Whether the Load balancer is forced to redirect requests from HTTP to HTTPS
	RedirectHTTPToHTTPS *bool `json:"redirectHttpToHttps,omitempty" tf:"redirect_http_to_https,omitempty"`

	// The status of the load balancer.
	// Status indicates the status of the object.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Timeouts configuration (create, update, delete).
	// +mapType=granular
	Timeouts map[string]*string `json:"timeouts,omitempty" tf:"timeouts,omitempty"`
}

type LoadbalancerParameters struct {

	// The algorithm used to process requests. Accepted values: roundrobin/leastconn.
	// The algorithm used to process requests. Accepted values: roundrobin/leastconn.
	// +kubebuilder:validation:Optional
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	// The servers that the load balancer can communicate with.
	// List of backend servers.
	// +kubebuilder:validation:Optional
	BackendServer []BackendServerParameters `json:"backendServer,omitempty" tf:"backend_server,omitempty"`

	// The forwarding rules of the load balancer.
	// List of forwarding rules for the Load balancer.
	// +kubebuilder:validation:Optional
	ForwardingRule []ForwardingRuleParameters `json:"forwardingRule,omitempty" tf:"forwarding_rule,omitempty"`

	// List of labels in the format [ "label1", "label2" ].
	// List of labels.
	// +kubebuilder:validation:Optional
	// +listType=set
	Labels []*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The UUID of the IPv4 address the load balancer will listen to for incoming requests.
	// The UUID of the IPv4 address the Load balancer will listen to for incoming requests.
	// +crossplane:generate:reference:type=github.com/dNationCloud/provider-gridscale/apis/gridscale/v1alpha1.IPv4
	// +kubebuilder:validation:Optional
	ListenIPv4UUID *string `json:"listenIpv4Uuid,omitempty" tf:"listen_ipv4_uuid,omitempty"`

	// Reference to a IPv4 in gridscale to populate listenIpv4Uuid.
	// +kubebuilder:validation:Optional
	ListenIPv4UUIDRef *v1.Reference `json:"listenIpv4UuidRef,omitempty" tf:"-"`

	// Selector for a IPv4 in gridscale to populate listenIpv4Uuid.
	// +kubebuilder:validation:Optional
	ListenIPv4UUIDSelector *v1.Selector `json:"listenIpv4UuidSelector,omitempty" tf:"-"`

	// The UUID of the IPv6 address the load balancer will listen to for incoming requests.
	// The UUID of the IPv6 address the Load balancer will listen to for incoming requests.
	// +crossplane:generate:reference:type=github.com/dNationCloud/provider-gridscale/apis/gridscale/v1alpha1.IPv6
	// +kubebuilder:validation:Optional
	ListenIPv6UUID *string `json:"listenIpv6Uuid,omitempty" tf:"listen_ipv6_uuid,omitempty"`

	// Reference to a IPv6 in gridscale to populate listenIpv6Uuid.
	// +kubebuilder:validation:Optional
	ListenIPv6UUIDRef *v1.Reference `json:"listenIpv6UuidRef,omitempty" tf:"-"`

	// Selector for a IPv6 in gridscale to populate listenIpv6Uuid.
	// +kubebuilder:validation:Optional
	ListenIPv6UUIDSelector *v1.Selector `json:"listenIpv6UuidSelector,omitempty" tf:"-"`

	// The human-readable name of the object. It supports the full UTF-8 character set, with a maximum of 64 characters.
	// The human-readable name of the object. It supports the full UTF-8 character set, with a maximum of 64 characters
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Whether the load balancer is forced to redirect requests from HTTP to HTTPS.
	// Whether the Load balancer is forced to redirect requests from HTTP to HTTPS
	// +kubebuilder:validation:Optional
	RedirectHTTPToHTTPS *bool `json:"redirectHttpToHttps,omitempty" tf:"redirect_http_to_https,omitempty"`

	// The status of the load balancer.
	// Status indicates the status of the object.
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Timeouts configuration (create, update, delete).
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Timeouts map[string]*string `json:"timeouts,omitempty" tf:"timeouts,omitempty"`
}

// LoadbalancerSpec defines the desired state of Loadbalancer
type LoadbalancerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LoadbalancerParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider LoadbalancerInitParameters `json:"initProvider,omitempty"`
}

// LoadbalancerStatus defines the observed state of Loadbalancer.
type LoadbalancerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LoadbalancerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Loadbalancer is the Schema for the Loadbalancers API. Manage a loadbalancer in gridscale.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gridscale}
type Loadbalancer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.algorithm) || (has(self.initProvider) && has(self.initProvider.algorithm))",message="spec.forProvider.algorithm is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.backendServer) || (has(self.initProvider) && has(self.initProvider.backendServer))",message="spec.forProvider.backendServer is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.forwardingRule) || (has(self.initProvider) && has(self.initProvider.forwardingRule))",message="spec.forProvider.forwardingRule is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.redirectHttpToHttps) || (has(self.initProvider) && has(self.initProvider.redirectHttpToHttps))",message="spec.forProvider.redirectHttpToHttps is a required parameter"
	Spec   LoadbalancerSpec   `json:"spec"`
	Status LoadbalancerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LoadbalancerList contains a list of Loadbalancers
type LoadbalancerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Loadbalancer `json:"items"`
}

// Repository type metadata.
var (
	Loadbalancer_Kind             = "Loadbalancer"
	Loadbalancer_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Loadbalancer_Kind}.String()
	Loadbalancer_KindAPIVersion   = Loadbalancer_Kind + "." + CRDGroupVersion.String()
	Loadbalancer_GroupVersionKind = CRDGroupVersion.WithKind(Loadbalancer_Kind)
)

func init() {
	SchemeBuilder.Register(&Loadbalancer{}, &LoadbalancerList{})
}
