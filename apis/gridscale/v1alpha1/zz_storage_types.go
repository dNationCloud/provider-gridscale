// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type StorageInitParameters_2 struct {

	// required (integer - minimum: 1 - maximum: 4096).
	// The capacity of a storage in GB.
	Capacity *float64 `json:"capacity,omitempty" tf:"capacity,omitempty"`

	// List of labels in the format [ "label1", "label2" ].
	// List of labels.
	// +listType=set
	Labels []*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The human-readable name of the object. It supports the full UTF-8 character set, with a maximum of 64 characters.
	// The human-readable name of the object. It supports the full UTF-8 character set, with a maximum of 64 characters.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Rollback the storage from a specific storage backup.
	// Rollback the storage from a specific storage backup.
	RollbackFromBackupUUID *string `json:"rollbackFromBackupUuid,omitempty" tf:"rollback_from_backup_uuid,omitempty"`

	// (one of storage, storage_high, storage_insane).
	// (one of storage, storage_high, storage_insane)
	StorageType *string `json:"storageType,omitempty" tf:"storage_type,omitempty"`

	// Storage variant (one of local or distributed). Default: "distributed".
	// Storage variant (one of local or distributed).
	StorageVariant *string `json:"storageVariant,omitempty" tf:"storage_variant,omitempty"`

	// List of labels in the format [ "label1", "label2" ].
	Template []TemplateInitParameters `json:"template,omitempty" tf:"template,omitempty"`
}

type StorageObservation_2 struct {

	// required (integer - minimum: 1 - maximum: 4096).
	// The capacity of a storage in GB.
	Capacity *float64 `json:"capacity,omitempty" tf:"capacity,omitempty"`

	// Defines the date and time of the last object change.
	// Defines the date and time of the last object change.
	ChangeTime *string `json:"changeTime,omitempty" tf:"change_time,omitempty"`

	// The time the object was created.
	// Defines the date and time the object was initially created.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// The price for the current period since the last bill.
	CurrentPrice *float64 `json:"currentPrice,omitempty" tf:"current_price,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// List of labels in the format [ "label1", "label2" ].
	// List of labels.
	// +listType=set
	Labels []*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Indicates the UUID of the last used template on this storage (inherited from snapshots).
	LastUsedTemplate *string `json:"lastUsedTemplate,omitempty" tf:"last_used_template,omitempty"`

	// If a template has been used that requires a license key (e.g. Windows Servers) this shows the product_no of the license (see the /prices endpoint for more details).
	// If a template has been used that requires a license key (e.g. Windows Servers) this shows the product_no of the license (see the /prices endpoint for more details).
	LicenseProductNo *float64 `json:"licenseProductNo,omitempty" tf:"license_product_no,omitempty"`

	// Two digit country code (ISO 3166-2) of the location where this object is placed.
	// Two digit country code (ISO 3166-2) of the location where this object is placed.
	LocationCountry *string `json:"locationCountry,omitempty" tf:"location_country,omitempty"`

	// Uses IATA airport code, which works as a location identifier.
	// Uses IATA airport code, which works as a location identifier.
	LocationIata *string `json:"locationIata,omitempty" tf:"location_iata,omitempty"`

	// The location name.
	// The human-readable name of the location. It supports the full UTF-8 character set, with a maximum of 64 characters.
	LocationName *string `json:"locationName,omitempty" tf:"location_name,omitempty"`

	// The location this storage is placed. The location of a resource is determined by it's project.
	// The location this object is placed.
	LocationUUID *string `json:"locationUuid,omitempty" tf:"location_uuid,omitempty"`

	// The human-readable name of the object. It supports the full UTF-8 character set, with a maximum of 64 characters.
	// The human-readable name of the object. It supports the full UTF-8 character set, with a maximum of 64 characters.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	ParentUUID *string `json:"parentUuid,omitempty" tf:"parent_uuid,omitempty"`

	// Rollback the storage from a specific storage backup.
	// Rollback the storage from a specific storage backup.
	RollbackFromBackupUUID *string `json:"rollbackFromBackupUuid,omitempty" tf:"rollback_from_backup_uuid,omitempty"`

	// status indicates the status of the object.
	// status indicates the status of the object.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// (one of storage, storage_high, storage_insane).
	// (one of storage, storage_high, storage_insane)
	StorageType *string `json:"storageType,omitempty" tf:"storage_type,omitempty"`

	// Storage variant (one of local or distributed). Default: "distributed".
	// Storage variant (one of local or distributed).
	StorageVariant *string `json:"storageVariant,omitempty" tf:"storage_variant,omitempty"`

	// List of labels in the format [ "label1", "label2" ].
	Template []TemplateObservation `json:"template,omitempty" tf:"template,omitempty"`

	// The amount of minutes the IP address has been in use.
	UsageInMinutes *float64 `json:"usageInMinutes,omitempty" tf:"usage_in_minutes,omitempty"`
}

type StorageParameters_2 struct {

	// required (integer - minimum: 1 - maximum: 4096).
	// The capacity of a storage in GB.
	// +kubebuilder:validation:Optional
	Capacity *float64 `json:"capacity,omitempty" tf:"capacity,omitempty"`

	// List of labels in the format [ "label1", "label2" ].
	// List of labels.
	// +kubebuilder:validation:Optional
	// +listType=set
	Labels []*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The human-readable name of the object. It supports the full UTF-8 character set, with a maximum of 64 characters.
	// The human-readable name of the object. It supports the full UTF-8 character set, with a maximum of 64 characters.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Rollback the storage from a specific storage backup.
	// Rollback the storage from a specific storage backup.
	// +kubebuilder:validation:Optional
	RollbackFromBackupUUID *string `json:"rollbackFromBackupUuid,omitempty" tf:"rollback_from_backup_uuid,omitempty"`

	// (one of storage, storage_high, storage_insane).
	// (one of storage, storage_high, storage_insane)
	// +kubebuilder:validation:Optional
	StorageType *string `json:"storageType,omitempty" tf:"storage_type,omitempty"`

	// Storage variant (one of local or distributed). Default: "distributed".
	// Storage variant (one of local or distributed).
	// +kubebuilder:validation:Optional
	StorageVariant *string `json:"storageVariant,omitempty" tf:"storage_variant,omitempty"`

	// List of labels in the format [ "label1", "label2" ].
	// +kubebuilder:validation:Optional
	Template []TemplateParameters `json:"template,omitempty" tf:"template,omitempty"`
}

type TemplateInitParameters struct {

	// The hostname of the installed server (ignored for private templates and public windows templates).
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// The root (Linux) or Administrator (Windows) password to set for the installed storage. Valid only for public templates. The password has to be either plain-text or a crypt string (modular crypt format - MCF).
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// (one of plain, crypt) Required if password is set (ignored for private templates and public Windows templates).
	PasswordType *string `json:"passwordType,omitempty" tf:"password_type,omitempty"`

	// (array of any - minItems: 0) Public Linux templates only! The UUIDs of SSH keys to be added for the root user.
	// +crossplane:generate:reference:type=github.com/dNationCloud/provider-gridscale/apis/gridscale/v1alpha1.Sshkey
	Sshkeys []*string `json:"sshkeys,omitempty" tf:"sshkeys,omitempty"`

	// References to Sshkey in gridscale to populate sshkeys.
	// +kubebuilder:validation:Optional
	SshkeysRefs []v1.Reference `json:"sshkeysRefs,omitempty" tf:"-"`

	// Selector for a list of Sshkey in gridscale to populate sshkeys.
	// +kubebuilder:validation:Optional
	SshkeysSelector *v1.Selector `json:"sshkeysSelector,omitempty" tf:"-"`

	// The UUID of a template. This can be found in the the page Template by clicking more on the template or by using a gridscale_template datasource.
	// +crossplane:generate:reference:type=github.com/dNationCloud/provider-gridscale/apis/gridscale/v1alpha1.Template
	TemplateUUID *string `json:"templateUuid,omitempty" tf:"template_uuid,omitempty"`

	// Reference to a Template in gridscale to populate templateUuid.
	// +kubebuilder:validation:Optional
	TemplateUUIDRef *v1.Reference `json:"templateUuidRef,omitempty" tf:"-"`

	// Selector for a Template in gridscale to populate templateUuid.
	// +kubebuilder:validation:Optional
	TemplateUUIDSelector *v1.Selector `json:"templateUuidSelector,omitempty" tf:"-"`
}

type TemplateObservation struct {

	// The hostname of the installed server (ignored for private templates and public windows templates).
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// (one of plain, crypt) Required if password is set (ignored for private templates and public Windows templates).
	PasswordType *string `json:"passwordType,omitempty" tf:"password_type,omitempty"`

	// (array of any - minItems: 0) Public Linux templates only! The UUIDs of SSH keys to be added for the root user.
	Sshkeys []*string `json:"sshkeys,omitempty" tf:"sshkeys,omitempty"`

	// The UUID of a template. This can be found in the the page Template by clicking more on the template or by using a gridscale_template datasource.
	TemplateUUID *string `json:"templateUuid,omitempty" tf:"template_uuid,omitempty"`
}

type TemplateParameters struct {

	// The hostname of the installed server (ignored for private templates and public windows templates).
	// +kubebuilder:validation:Optional
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// The root (Linux) or Administrator (Windows) password to set for the installed storage. Valid only for public templates. The password has to be either plain-text or a crypt string (modular crypt format - MCF).
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// (one of plain, crypt) Required if password is set (ignored for private templates and public Windows templates).
	// +kubebuilder:validation:Optional
	PasswordType *string `json:"passwordType,omitempty" tf:"password_type,omitempty"`

	// (array of any - minItems: 0) Public Linux templates only! The UUIDs of SSH keys to be added for the root user.
	// +crossplane:generate:reference:type=github.com/dNationCloud/provider-gridscale/apis/gridscale/v1alpha1.Sshkey
	// +kubebuilder:validation:Optional
	Sshkeys []*string `json:"sshkeys,omitempty" tf:"sshkeys,omitempty"`

	// References to Sshkey in gridscale to populate sshkeys.
	// +kubebuilder:validation:Optional
	SshkeysRefs []v1.Reference `json:"sshkeysRefs,omitempty" tf:"-"`

	// Selector for a list of Sshkey in gridscale to populate sshkeys.
	// +kubebuilder:validation:Optional
	SshkeysSelector *v1.Selector `json:"sshkeysSelector,omitempty" tf:"-"`

	// The UUID of a template. This can be found in the the page Template by clicking more on the template or by using a gridscale_template datasource.
	// +crossplane:generate:reference:type=github.com/dNationCloud/provider-gridscale/apis/gridscale/v1alpha1.Template
	// +kubebuilder:validation:Optional
	TemplateUUID *string `json:"templateUuid,omitempty" tf:"template_uuid,omitempty"`

	// Reference to a Template in gridscale to populate templateUuid.
	// +kubebuilder:validation:Optional
	TemplateUUIDRef *v1.Reference `json:"templateUuidRef,omitempty" tf:"-"`

	// Selector for a Template in gridscale to populate templateUuid.
	// +kubebuilder:validation:Optional
	TemplateUUIDSelector *v1.Selector `json:"templateUuidSelector,omitempty" tf:"-"`
}

// StorageSpec defines the desired state of Storage
type StorageSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StorageParameters_2 `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider StorageInitParameters_2 `json:"initProvider,omitempty"`
}

// StorageStatus defines the observed state of Storage.
type StorageStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StorageObservation_2 `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Storage is the Schema for the Storages API. Manages a storage in gridscale.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gridscale}
type Storage struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.capacity) || (has(self.initProvider) && has(self.initProvider.capacity))",message="spec.forProvider.capacity is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   StorageSpec   `json:"spec"`
	Status StorageStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StorageList contains a list of Storages
type StorageList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Storage `json:"items"`
}

// Repository type metadata.
var (
	Storage_Kind             = "Storage"
	Storage_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Storage_Kind}.String()
	Storage_KindAPIVersion   = Storage_Kind + "." + CRDGroupVersion.String()
	Storage_GroupVersionKind = CRDGroupVersion.WithKind(Storage_Kind)
)

func init() {
	SchemeBuilder.Register(&Storage{}, &StorageList{})
}
