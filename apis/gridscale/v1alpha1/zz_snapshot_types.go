// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ObjectStorageExportInitParameters struct {

	// Access key
	AccessKeySecretRef v1.SecretKeySelector `json:"accessKeySecretRef" tf:"-"`

	// Bucket name
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// Host of object storage. Must be of URL type. E.g: https://gos3.io
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// Name of file (include file path)
	Object *string `json:"object,omitempty" tf:"object,omitempty"`

	Private *bool `json:"private,omitempty" tf:"private,omitempty"`

	// Secret key
	SecretKeySecretRef v1.SecretKeySelector `json:"secretKeySecretRef" tf:"-"`
}

type ObjectStorageExportObservation struct {

	// Bucket name
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// Host of object storage. Must be of URL type. E.g: https://gos3.io
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// Name of file (include file path)
	Object *string `json:"object,omitempty" tf:"object,omitempty"`

	Private *bool `json:"private,omitempty" tf:"private,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type ObjectStorageExportParameters struct {

	// Access key
	// +kubebuilder:validation:Optional
	AccessKeySecretRef v1.SecretKeySelector `json:"accessKeySecretRef" tf:"-"`

	// Bucket name
	// +kubebuilder:validation:Optional
	Bucket *string `json:"bucket" tf:"bucket,omitempty"`

	// Host of object storage. Must be of URL type. E.g: https://gos3.io
	// +kubebuilder:validation:Optional
	Host *string `json:"host" tf:"host,omitempty"`

	// Name of file (include file path)
	// +kubebuilder:validation:Optional
	Object *string `json:"object" tf:"object,omitempty"`

	// +kubebuilder:validation:Optional
	Private *bool `json:"private" tf:"private,omitempty"`

	// Secret key
	// +kubebuilder:validation:Optional
	SecretKeySecretRef v1.SecretKeySelector `json:"secretKeySecretRef" tf:"-"`
}

type RollbackInitParameters struct {

	// ID of the rollback request. Each rollback request has to have a unique id. ID can be any string value.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type RollbackObservation struct {

	// ID of the rollback request. Each rollback request has to have a unique id. ID can be any string value.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	RollbackTime *string `json:"rollbackTime,omitempty" tf:"rollback_time,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type RollbackParameters struct {

	// ID of the rollback request. Each rollback request has to have a unique id. ID can be any string value.
	// +kubebuilder:validation:Optional
	ID *string `json:"id" tf:"id,omitempty"`
}

type SnapshotInitParameters struct {

	// List of labels.
	// +listType=set
	Labels []*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The human-readable name of the object
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Export snapshot to a object storage
	ObjectStorageExport []ObjectStorageExportInitParameters `json:"objectStorageExport,omitempty" tf:"object_storage_export,omitempty"`

	// Returns a storage to the state of the selected Snapshot.
	Rollback []RollbackInitParameters `json:"rollback,omitempty" tf:"rollback,omitempty"`

	// UUID of the storage used to create this snapshot
	// +crossplane:generate:reference:type=github.com/dNationCloud/provider-gridscale/apis/gridscale/v1alpha1.Storage
	StorageUUID *string `json:"storageUuid,omitempty" tf:"storage_uuid,omitempty"`

	// Reference to a Storage in gridscale to populate storageUuid.
	// +kubebuilder:validation:Optional
	StorageUUIDRef *v1.Reference `json:"storageUuidRef,omitempty" tf:"-"`

	// Selector for a Storage in gridscale to populate storageUuid.
	// +kubebuilder:validation:Optional
	StorageUUIDSelector *v1.Selector `json:"storageUuidSelector,omitempty" tf:"-"`
}

type SnapshotObservation struct {

	// The capacity of a storage/ISO image/template/snapshot in GB
	Capacity *float64 `json:"capacity,omitempty" tf:"capacity,omitempty"`

	// Defines the date and time of the last object change
	ChangeTime *string `json:"changeTime,omitempty" tf:"change_time,omitempty"`

	// Defines the date and time the object was initially created
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// The price for the current period since the last bill
	CurrentPrice *float64 `json:"currentPrice,omitempty" tf:"current_price,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// List of labels.
	// +listType=set
	Labels []*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// If a template has been used that requires a license key (e.g. Windows Servers) this shows
	// the product_no of the license (see the /prices endpoint for more details)
	LicenseProductNo *float64 `json:"licenseProductNo,omitempty" tf:"license_product_no,omitempty"`

	// The human-readable name of the location
	LocationCountry *string `json:"locationCountry,omitempty" tf:"location_country,omitempty"`

	// Uses IATA airport code, which works as a location identifier
	LocationIata *string `json:"locationIata,omitempty" tf:"location_iata,omitempty"`

	// The human-readable name of the location
	LocationName *string `json:"locationName,omitempty" tf:"location_name,omitempty"`

	// The location this object is placed.
	LocationUUID *string `json:"locationUuid,omitempty" tf:"location_uuid,omitempty"`

	// The human-readable name of the object
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Export snapshot to a object storage
	ObjectStorageExport []ObjectStorageExportObservation `json:"objectStorageExport,omitempty" tf:"object_storage_export,omitempty"`

	// Returns a storage to the state of the selected Snapshot.
	Rollback []RollbackObservation `json:"rollback,omitempty" tf:"rollback,omitempty"`

	// Status indicates the status of the object
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// UUID of the storage used to create this snapshot
	StorageUUID *string `json:"storageUuid,omitempty" tf:"storage_uuid,omitempty"`

	// Total minutes the object has been running
	UsageInMinutes *float64 `json:"usageInMinutes,omitempty" tf:"usage_in_minutes,omitempty"`
}

type SnapshotParameters struct {

	// List of labels.
	// +kubebuilder:validation:Optional
	// +listType=set
	Labels []*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The human-readable name of the object
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Export snapshot to a object storage
	// +kubebuilder:validation:Optional
	ObjectStorageExport []ObjectStorageExportParameters `json:"objectStorageExport,omitempty" tf:"object_storage_export,omitempty"`

	// Returns a storage to the state of the selected Snapshot.
	// +kubebuilder:validation:Optional
	Rollback []RollbackParameters `json:"rollback,omitempty" tf:"rollback,omitempty"`

	// UUID of the storage used to create this snapshot
	// +crossplane:generate:reference:type=github.com/dNationCloud/provider-gridscale/apis/gridscale/v1alpha1.Storage
	// +kubebuilder:validation:Optional
	StorageUUID *string `json:"storageUuid,omitempty" tf:"storage_uuid,omitempty"`

	// Reference to a Storage in gridscale to populate storageUuid.
	// +kubebuilder:validation:Optional
	StorageUUIDRef *v1.Reference `json:"storageUuidRef,omitempty" tf:"-"`

	// Selector for a Storage in gridscale to populate storageUuid.
	// +kubebuilder:validation:Optional
	StorageUUIDSelector *v1.Selector `json:"storageUuidSelector,omitempty" tf:"-"`
}

// SnapshotSpec defines the desired state of Snapshot
type SnapshotSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SnapshotParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SnapshotInitParameters `json:"initProvider,omitempty"`
}

// SnapshotStatus defines the observed state of Snapshot.
type SnapshotStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SnapshotObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Snapshot is the Schema for the Snapshots API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gridscale}
type Snapshot struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   SnapshotSpec   `json:"spec"`
	Status SnapshotStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SnapshotList contains a list of Snapshots
type SnapshotList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Snapshot `json:"items"`
}

// Repository type metadata.
var (
	Snapshot_Kind             = "Snapshot"
	Snapshot_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Snapshot_Kind}.String()
	Snapshot_KindAPIVersion   = Snapshot_Kind + "." + CRDGroupVersion.String()
	Snapshot_GroupVersionKind = CRDGroupVersion.WithKind(Snapshot_Kind)
)

func init() {
	SchemeBuilder.Register(&Snapshot{}, &SnapshotList{})
}
