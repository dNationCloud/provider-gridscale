// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FilesystemInitParameters struct {

	// Allowed CIDR block or IP address in CIDR notation.
	// +listType=set
	AllowedIPRanges []*string `json:"allowedIpRanges,omitempty" tf:"allowed_ip_ranges,omitempty"`

	// Target group id when root squash is active.
	AnonGID *float64 `json:"anonGid,omitempty" tf:"anon_gid,omitempty"`

	// Target user id when root squash is active.
	AnonUID *float64 `json:"anonUid,omitempty" tf:"anon_uid,omitempty"`

	// List of labels.
	// +listType=set
	Labels []*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The human-readable name of the object. It supports the full UTF-8 character set, with a maximum of 64 characters.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The UUID of the network that the service is attached to.
	// +crossplane:generate:reference:type=github.com/dNationCloud/provider-gridscale/apis/gridscale/v1alpha1.Network
	NetworkUUID *string `json:"networkUuid,omitempty" tf:"network_uuid,omitempty"`

	// Reference to a Network in gridscale to populate networkUuid.
	// +kubebuilder:validation:Optional
	NetworkUUIDRef *v1.Reference `json:"networkUuidRef,omitempty" tf:"-"`

	// Selector for a Network in gridscale to populate networkUuid.
	// +kubebuilder:validation:Optional
	NetworkUUIDSelector *v1.Selector `json:"networkUuidSelector,omitempty" tf:"-"`

	// Performance class of Filesystem service.
	PerformanceClass *string `json:"performanceClass,omitempty" tf:"performance_class,omitempty"`

	// The Filesystem service release of this instance.\n
	// For convenience, please use gscloud https://github.com/gridscale/gscloud to get the list of available Filesystem service releases.
	Release *string `json:"release,omitempty" tf:"release,omitempty"`

	// Map root user/group ownership to anon_uid/anon_gid
	RootSquash *bool `json:"rootSquash,omitempty" tf:"root_squash,omitempty"`

	// Security zone UUID linked to Filesystem service.
	SecurityZoneUUID *string `json:"securityZoneUuid,omitempty" tf:"security_zone_uuid,omitempty"`
}

type FilesystemObservation struct {

	// Allowed CIDR block or IP address in CIDR notation.
	// +listType=set
	AllowedIPRanges []*string `json:"allowedIpRanges,omitempty" tf:"allowed_ip_ranges,omitempty"`

	// Target group id when root squash is active.
	AnonGID *float64 `json:"anonGid,omitempty" tf:"anon_gid,omitempty"`

	// Target user id when root squash is active.
	AnonUID *float64 `json:"anonUid,omitempty" tf:"anon_uid,omitempty"`

	// Time of the last change.
	ChangeTime *string `json:"changeTime,omitempty" tf:"change_time,omitempty"`

	// Date time this service has been created.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// List of labels.
	// +listType=set
	Labels []*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The port numbers where this Filesystem service accepts connections.
	ListenPort []ListenPortObservation `json:"listenPort,omitempty" tf:"listen_port,omitempty"`

	// The human-readable name of the object. It supports the full UTF-8 character set, with a maximum of 64 characters.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The UUID of the network that the service is attached to.
	NetworkUUID *string `json:"networkUuid,omitempty" tf:"network_uuid,omitempty"`

	// Performance class of Filesystem service.
	PerformanceClass *string `json:"performanceClass,omitempty" tf:"performance_class,omitempty"`

	// The Filesystem service release of this instance.\n
	// For convenience, please use gscloud https://github.com/gridscale/gscloud to get the list of available Filesystem service releases.
	Release *string `json:"release,omitempty" tf:"release,omitempty"`

	// Map root user/group ownership to anon_uid/anon_gid
	RootSquash *bool `json:"rootSquash,omitempty" tf:"root_squash,omitempty"`

	// Security zone UUID linked to Filesystem service.
	SecurityZoneUUID *string `json:"securityZoneUuid,omitempty" tf:"security_zone_uuid,omitempty"`

	// The template service's category used to create the service.
	ServiceTemplateCategory *string `json:"serviceTemplateCategory,omitempty" tf:"service_template_category,omitempty"`

	// PaaS service template that Filesystem service uses.
	ServiceTemplateUUID *string `json:"serviceTemplateUuid,omitempty" tf:"service_template_uuid,omitempty"`

	// Current status of Filesystem service.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Number of minutes that Filesystem service is in use.
	UsageInMinutes *float64 `json:"usageInMinutes,omitempty" tf:"usage_in_minutes,omitempty"`
}

type FilesystemParameters struct {

	// Allowed CIDR block or IP address in CIDR notation.
	// +kubebuilder:validation:Optional
	// +listType=set
	AllowedIPRanges []*string `json:"allowedIpRanges,omitempty" tf:"allowed_ip_ranges,omitempty"`

	// Target group id when root squash is active.
	// +kubebuilder:validation:Optional
	AnonGID *float64 `json:"anonGid,omitempty" tf:"anon_gid,omitempty"`

	// Target user id when root squash is active.
	// +kubebuilder:validation:Optional
	AnonUID *float64 `json:"anonUid,omitempty" tf:"anon_uid,omitempty"`

	// List of labels.
	// +kubebuilder:validation:Optional
	// +listType=set
	Labels []*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The human-readable name of the object. It supports the full UTF-8 character set, with a maximum of 64 characters.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The UUID of the network that the service is attached to.
	// +crossplane:generate:reference:type=github.com/dNationCloud/provider-gridscale/apis/gridscale/v1alpha1.Network
	// +kubebuilder:validation:Optional
	NetworkUUID *string `json:"networkUuid,omitempty" tf:"network_uuid,omitempty"`

	// Reference to a Network in gridscale to populate networkUuid.
	// +kubebuilder:validation:Optional
	NetworkUUIDRef *v1.Reference `json:"networkUuidRef,omitempty" tf:"-"`

	// Selector for a Network in gridscale to populate networkUuid.
	// +kubebuilder:validation:Optional
	NetworkUUIDSelector *v1.Selector `json:"networkUuidSelector,omitempty" tf:"-"`

	// Performance class of Filesystem service.
	// +kubebuilder:validation:Optional
	PerformanceClass *string `json:"performanceClass,omitempty" tf:"performance_class,omitempty"`

	// The Filesystem service release of this instance.\n
	// For convenience, please use gscloud https://github.com/gridscale/gscloud to get the list of available Filesystem service releases.
	// +kubebuilder:validation:Optional
	Release *string `json:"release,omitempty" tf:"release,omitempty"`

	// Map root user/group ownership to anon_uid/anon_gid
	// +kubebuilder:validation:Optional
	RootSquash *bool `json:"rootSquash,omitempty" tf:"root_squash,omitempty"`

	// Security zone UUID linked to Filesystem service.
	// +kubebuilder:validation:Optional
	SecurityZoneUUID *string `json:"securityZoneUuid,omitempty" tf:"security_zone_uuid,omitempty"`
}

type ListenPortInitParameters struct {
}

type ListenPortObservation struct {
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`
}

type ListenPortParameters struct {
}

// FilesystemSpec defines the desired state of Filesystem
type FilesystemSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FilesystemParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider FilesystemInitParameters `json:"initProvider,omitempty"`
}

// FilesystemStatus defines the observed state of Filesystem.
type FilesystemStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FilesystemObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Filesystem is the Schema for the Filesystems API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gridscale}
type Filesystem struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.performanceClass) || (has(self.initProvider) && has(self.initProvider.performanceClass))",message="spec.forProvider.performanceClass is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.release) || (has(self.initProvider) && has(self.initProvider.release))",message="spec.forProvider.release is a required parameter"
	Spec   FilesystemSpec   `json:"spec"`
	Status FilesystemStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FilesystemList contains a list of Filesystems
type FilesystemList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Filesystem `json:"items"`
}

// Repository type metadata.
var (
	Filesystem_Kind             = "Filesystem"
	Filesystem_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Filesystem_Kind}.String()
	Filesystem_KindAPIVersion   = Filesystem_Kind + "." + CRDGroupVersion.String()
	Filesystem_GroupVersionKind = CRDGroupVersion.WithKind(Filesystem_Kind)
)

func init() {
	SchemeBuilder.Register(&Filesystem{}, &FilesystemList{})
}
