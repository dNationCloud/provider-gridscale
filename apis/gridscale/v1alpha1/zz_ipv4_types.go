// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IPv4InitParameters struct {

	// Sets failover mode for this IP. If true, then this IP is no longer available for DHCP and can no longer be related to any server.
	// Sets failover mode for this IP. If true, then this IP is no longer available for DHCP and can no longer be related to any server.
	Failover *bool `json:"failover,omitempty" tf:"failover,omitempty"`

	// List of labels in the format [ "label1", "label2" ].
	// List of labels.
	// +listType=set
	Labels []*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The human-readable name of the object. It supports the full UTF-8 character set, with a maximum of 64 characters.
	// The human-readable name of the object. It supports the full UTF-8 character set, with a maximum of 64 characters.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Defines the reverse DNS entry for the IP address (PTR Resource Record).
	// Defines the reverse DNS entry for the IP address (PTR Resource Record).
	ReverseDNS *string `json:"reverseDns,omitempty" tf:"reverse_dns,omitempty"`

	// Timeouts configuration (create, update, delete).
	// +mapType=granular
	Timeouts map[string]*string `json:"timeouts,omitempty" tf:"timeouts,omitempty"`
}

type IPv4Observation struct {

	// Defines the date and time of the last object change.
	// The date and time of the last object change.
	ChangeTime *string `json:"changeTime,omitempty" tf:"change_time,omitempty"`

	// The time the object was created.
	// The date and time the object was initially created.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// The price for the current period since the last bill.
	// Defines the price for the current period since the last bill.
	CurrentPrice *float64 `json:"currentPrice,omitempty" tf:"current_price,omitempty"`

	// Defines if the object is administratively blocked. If true, it can not be deleted by the user.
	// Defines if the object is administratively blocked. If true, it can not be deleted by the user.
	DeleteBlock *bool `json:"deleteBlock,omitempty" tf:"delete_block,omitempty"`

	// Sets failover mode for this IP. If true, then this IP is no longer available for DHCP and can no longer be related to any server.
	// Sets failover mode for this IP. If true, then this IP is no longer available for DHCP and can no longer be related to any server.
	Failover *bool `json:"failover,omitempty" tf:"failover,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Defines the IP address.
	// Defines the IP address.
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// List of labels in the format [ "label1", "label2" ].
	// List of labels.
	// +listType=set
	Labels []*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Two digit country code (ISO 3166-2) of the location where this object is placed.
	// Two digit country code (ISO 3166-2) of the location where this object is placed.
	LocationCountry *string `json:"locationCountry,omitempty" tf:"location_country,omitempty"`

	// Uses IATA airport code, which works as a location identifier.
	// Uses IATA airport code, which works as a location identifier
	LocationIata *string `json:"locationIata,omitempty" tf:"location_iata,omitempty"`

	// The location name.
	// The human-readable name of the location. It supports the full UTF-8 character set, with a maximum of 64 characters
	LocationName *string `json:"locationName,omitempty" tf:"location_name,omitempty"`

	// See Argument Reference above.
	// The location this object is placed.
	LocationUUID *string `json:"locationUuid,omitempty" tf:"location_uuid,omitempty"`

	// The human-readable name of the object. It supports the full UTF-8 character set, with a maximum of 64 characters.
	// The human-readable name of the object. It supports the full UTF-8 character set, with a maximum of 64 characters.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The network address and the subnet.
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// Defines the reverse DNS entry for the IP address (PTR Resource Record).
	// Defines the reverse DNS entry for the IP address (PTR Resource Record).
	ReverseDNS *string `json:"reverseDns,omitempty" tf:"reverse_dns,omitempty"`

	// status indicates the status of the object.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Timeouts configuration (create, update, delete).
	// +mapType=granular
	Timeouts map[string]*string `json:"timeouts,omitempty" tf:"timeouts,omitempty"`

	// The amount of minutes the IP address has been in use.
	UsageInMinutes *float64 `json:"usageInMinutes,omitempty" tf:"usage_in_minutes,omitempty"`
}

type IPv4Parameters struct {

	// Sets failover mode for this IP. If true, then this IP is no longer available for DHCP and can no longer be related to any server.
	// Sets failover mode for this IP. If true, then this IP is no longer available for DHCP and can no longer be related to any server.
	// +kubebuilder:validation:Optional
	Failover *bool `json:"failover,omitempty" tf:"failover,omitempty"`

	// List of labels in the format [ "label1", "label2" ].
	// List of labels.
	// +kubebuilder:validation:Optional
	// +listType=set
	Labels []*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The human-readable name of the object. It supports the full UTF-8 character set, with a maximum of 64 characters.
	// The human-readable name of the object. It supports the full UTF-8 character set, with a maximum of 64 characters.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Defines the reverse DNS entry for the IP address (PTR Resource Record).
	// Defines the reverse DNS entry for the IP address (PTR Resource Record).
	// +kubebuilder:validation:Optional
	ReverseDNS *string `json:"reverseDns,omitempty" tf:"reverse_dns,omitempty"`

	// Timeouts configuration (create, update, delete).
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Timeouts map[string]*string `json:"timeouts,omitempty" tf:"timeouts,omitempty"`
}

// IPv4Spec defines the desired state of IPv4
type IPv4Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IPv4Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider IPv4InitParameters `json:"initProvider,omitempty"`
}

// IPv4Status defines the observed state of IPv4.
type IPv4Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IPv4Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// IPv4 is the Schema for the IPv4s API. Manages an IPv4 address in gridscale.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gridscale}
type IPv4 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IPv4Spec   `json:"spec"`
	Status            IPv4Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IPv4List contains a list of IPv4s
type IPv4List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IPv4 `json:"items"`
}

// Repository type metadata.
var (
	IPv4_Kind             = "IPv4"
	IPv4_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IPv4_Kind}.String()
	IPv4_KindAPIVersion   = IPv4_Kind + "." + CRDGroupVersion.String()
	IPv4_GroupVersionKind = CRDGroupVersion.WithKind(IPv4_Kind)
)

func init() {
	SchemeBuilder.Register(&IPv4{}, &IPv4List{})
}
