// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TemplateInitParameters_2 struct {

	// List of labels.
	// List of labels.
	// +listType=set
	Labels []*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The exact name of the template as show in the page Template.
	// The human-readable name of the object. It supports the full UTF-8 character set, with a maximum of 64 characters.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Snapshot uuid for template.
	// Snapshot UUID for template.
	// +crossplane:generate:reference:type=github.com/dNationCloud/provider-gridscale/apis/gridscale/v1alpha1.Snapshot
	SnapshotUUID *string `json:"snapshotUuid,omitempty" tf:"snapshot_uuid,omitempty"`

	// Reference to a Snapshot in gridscale to populate snapshotUuid.
	// +kubebuilder:validation:Optional
	SnapshotUUIDRef *v1.Reference `json:"snapshotUuidRef,omitempty" tf:"-"`

	// Selector for a Snapshot in gridscale to populate snapshotUuid.
	// +kubebuilder:validation:Optional
	SnapshotUUIDSelector *v1.Selector `json:"snapshotUuidSelector,omitempty" tf:"-"`
}

type TemplateObservation_2 struct {

	// The capacity of a storage/ISO Image/template/snapshot in GB.
	// The capacity of a storage/ISO image/template/snapshot in GB.
	Capacity *float64 `json:"capacity,omitempty" tf:"capacity,omitempty"`

	// The date and time of the last object change.
	// The date and time of the last object change.
	ChangeTime *string `json:"changeTime,omitempty" tf:"change_time,omitempty"`

	// The date and time the object was initially created.
	// The date and time the object was initially created.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// Defines the price for the current period since the last bill.
	// Defines the price for the current period since the last bill.
	CurrentPrice *float64 `json:"currentPrice,omitempty" tf:"current_price,omitempty"`

	// Description of the template.
	// Description of the template.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The OS distribution that the template contains.
	// The Linux distribution of this template (if applicable).
	Distro *string `json:"distro,omitempty" tf:"distro,omitempty"`

	// The UUID of the template.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// List of labels.
	// List of labels.
	// +listType=set
	Labels []*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// If a template has been used that requires a license key (e.g. Windows Servers) this shows the product_no of the license (see the /prices endpoint for more details).
	// If a template has been used that requires a license key (e.g. Windows Servers) this shows the product_no of the license (see the /prices endpoint for more details).
	LicenseProductNo *float64 `json:"licenseProductNo,omitempty" tf:"license_product_no,omitempty"`

	// Two digit country code (ISO 3166-2) of the location where this object is placed.
	// Two digit country code (ISO 3166-2) of the location where this object is placed.
	LocationCountry *string `json:"locationCountry,omitempty" tf:"location_country,omitempty"`

	// Uses IATA airport code, which works as a location identifier.
	// Uses IATA airport code, which works as a location identifier.
	LocationIata *string `json:"locationIata,omitempty" tf:"location_iata,omitempty"`

	// The human-readable name of the location. It supports the full UTF-8 character set, with a maximum of 64 characters.
	// The human-readable name of the location. It supports the full UTF-8 character set, with a maximum of 64 characters
	LocationName *string `json:"locationName,omitempty" tf:"location_name,omitempty"`

	// The location this object is placed.
	// The location this object is placed.
	LocationUUID *string `json:"locationUuid,omitempty" tf:"location_uuid,omitempty"`

	// The exact name of the template as show in the page Template.
	// The human-readable name of the object. It supports the full UTF-8 character set, with a maximum of 64 characters.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The operating system installed in the template.
	// The operating system installed in the template.
	Ostype *string `json:"ostype,omitempty" tf:"ostype,omitempty"`

	// The object is private, the value will be true. Otherwise the value will be false.
	// The object is private, the value will be true. Otherwise the value will be false.
	Private *bool `json:"private,omitempty" tf:"private,omitempty"`

	// Snapshot uuid for template.
	// Snapshot UUID for template.
	SnapshotUUID *string `json:"snapshotUuid,omitempty" tf:"snapshot_uuid,omitempty"`

	// Status indicates the status of the object.
	// Status indicates the status of the object.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Total minutes the object has been running.
	// Total minutes the object has been running.
	UsageInMinutes *float64 `json:"usageInMinutes,omitempty" tf:"usage_in_minutes,omitempty"`

	// The version of the template.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type TemplateParameters_2 struct {

	// List of labels.
	// List of labels.
	// +kubebuilder:validation:Optional
	// +listType=set
	Labels []*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The exact name of the template as show in the page Template.
	// The human-readable name of the object. It supports the full UTF-8 character set, with a maximum of 64 characters.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Snapshot uuid for template.
	// Snapshot UUID for template.
	// +crossplane:generate:reference:type=github.com/dNationCloud/provider-gridscale/apis/gridscale/v1alpha1.Snapshot
	// +kubebuilder:validation:Optional
	SnapshotUUID *string `json:"snapshotUuid,omitempty" tf:"snapshot_uuid,omitempty"`

	// Reference to a Snapshot in gridscale to populate snapshotUuid.
	// +kubebuilder:validation:Optional
	SnapshotUUIDRef *v1.Reference `json:"snapshotUuidRef,omitempty" tf:"-"`

	// Selector for a Snapshot in gridscale to populate snapshotUuid.
	// +kubebuilder:validation:Optional
	SnapshotUUIDSelector *v1.Selector `json:"snapshotUuidSelector,omitempty" tf:"-"`
}

// TemplateSpec defines the desired state of Template
type TemplateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TemplateParameters_2 `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TemplateInitParameters_2 `json:"initProvider,omitempty"`
}

// TemplateStatus defines the observed state of Template.
type TemplateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TemplateObservation_2 `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Template is the Schema for the Templates API. Manages a template in gridscale.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gridscale}
type Template struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   TemplateSpec   `json:"spec"`
	Status TemplateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TemplateList contains a list of Templates
type TemplateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Template `json:"items"`
}

// Repository type metadata.
var (
	Template_Kind             = "Template"
	Template_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Template_Kind}.String()
	Template_KindAPIVersion   = Template_Kind + "." + CRDGroupVersion.String()
	Template_GroupVersionKind = CRDGroupVersion.WithKind(Template_Kind)
)

func init() {
	SchemeBuilder.Register(&Template{}, &TemplateList{})
}
